{"version":3,"sources":["queries.js"],"names":["global","recipes","id","title","details","upvotes","reviews","queries","request","response","popularRecipes","query","sort","i","length","push","status","json","message","Recipes","catch","res","error","body","parseInt","params","recipeId","rev","review","Reviews","splice"],"mappings":"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","file":"queries.js","sourceRoot":"C:/Users/Osaze/Desktop/andela-bootcamp27/server/routes","sourcesContent":["\r\nglobal.recipes = [\r\n  { id: 1, title: 'Chicken Speingrolls', details: 'wash chicken, roll in dough and fry', upvotes: 20 },\r\n  { id: 2, title: 'Jollof Rice', details: 'wash rice, boil tomatoes with spice, mix together', upvotes: 10 },\r\n  { id: 3, title: 'Baked Alaska', details: 'bake meringue, fill the inside, torch meringue', upvotes: 18 },\r\n  { id: 4, title: 'Stir Fry Shrimp', details: 'Fry up vegetables, add shrimps, mix together', upvotes: 7 }];\r\n\r\nglobal.reviews = [];\r\n\r\n\r\n\r\nclass queries {\r\n\r\n\r\n  static getAllRecipes(request, response) {\r\n    let popularRecipes = [];\r\n    if (request.query.sort) {\r\n      for (let i = 0; i < global.recipes.length; i++) {\r\n        if (global.recipes[i].upvotes > 10) {\r\n          popularRecipes.push(global.recipes[i]);\r\n        }\r\n      }\r\n      response.status(200).json({\r\n        status: 'Success', message: response.json({ Recipes: popularRecipes.sort() })\r\n      });\r\n    }\r\n    response.status(200).json({\r\n      status: 'Success', message: response.json({ Recipes: global.recipes })\r\n    })\r\n      .catch(error => res.status(404).json(error));\r\n  }\r\n\r\n  static submitRecipe(request, response) {\r\n    if (!request.body.title || !request.body.details) {\r\n      response.status(400).json({\r\n        status: 'Unsuccessful', message: 'Missing data input'\r\n      });\r\n    }\r\n    request.body.upvotes = 0;\r\n    global.recipes.push(request.body);\r\n    response.status(201).json({\r\n      status: 'Success', message: 'Submitted Recipe'\r\n    })\r\n      .catch(error => res.status(404).json(error));\r\n  }\r\n\r\n  static updateRecipe(request, response) {\r\n    for (let i = 0; i < global.recipes.length; i++) {\r\n      if (global.recipes[i].id === parseInt(request.params.recipeId, 10)) {\r\n        global.recipes[i].title = request.body.title;\r\n        global.recipes[i].details = request.body.details;\r\n        response.status(200).json({\r\n          status: 'Success', message: 'Updated Recipe'\r\n        });\r\n      }\r\n    }\r\n    response.status(404).json({\r\n      status: 'Unsuccesful', message: 'Recipe Not Found'\r\n    })\r\n      .catch(error => res.status(404).json(error));\r\n  }\r\n\r\n  static reviewRecipe(request, response) {\r\n    for (let i = 0; i < global.recipes.length; i++) {\r\n      if (global.recipes[i].id === parseInt(request.params.recipeId, 10)) {\r\n        let rev = { id: global.recipes[i].id, title: global.recipes[i].title, review: request.body.review };\r\n        global.reviews.push(rev);\r\n        response.status(201).json({\r\n          status: 'Submitted', message: response.json({ Reviews: global.reviews })\r\n        });\r\n      }\r\n    }\r\n    response.status(404).json({\r\n      status: 'Not Found', message: 'Recipe not found'\r\n    })\r\n      .catch(error => res.status(404).json(error));\r\n  }\r\n\r\n  static deleteRecipe(request, response) {\r\n    for (let i = 0; i < global.recipes.length; i++) {\r\n      if (global.recipes[i].id === parseInt(request.params.recipeId, 10)) {\r\n        global.recipes.splice(i, 1);\r\n        response.status(200).json({\r\n          status: 'Success', message: 'Recipe Deleted'\r\n        });\r\n      }\r\n    }\r\n    response.status(404).json({\r\n      status: 'Unsuccessful', message: 'Recipe Not Found'\r\n    })\r\n      .catch(error => res.status(404).json(error));\r\n  }\r\n}\r\n\r\nexport default queries;\r\n\r\n"]}